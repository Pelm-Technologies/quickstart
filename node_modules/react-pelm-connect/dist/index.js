

function ___$insertStyle(css) {
    if (!css || typeof window === 'undefined') {
        return;
    }
    const style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    document.head.appendChild(style);
    return css;
}

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var useScript = _interopDefault(require('react-script-hook'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var isConnectTokenDefined = function (config) {
    return config.connectToken !== undefined;
};
var useConnect = function (config) {
    // For internal use
    var initializeScriptUrl;
    switch (config.environment) {
        case 'staging': {
            initializeScriptUrl = 'https://cdn-staging.pelm.com/initialize.js';
            break;
        }
        case 'development': {
            initializeScriptUrl = 'http://localhost:8080/initialize.js';
            break;
        }
        default: {
            initializeScriptUrl = 'https://cdn.pelm.com/initialize.js';
            break;
        }
    }
    var _a = useScript({ src: initializeScriptUrl }), loading = _a[0], error = _a[1];
    var _b = React.useState(false), isReadyToOpen = _b[0], setIsReadyToOpen = _b[1];
    var isServer = typeof window === 'undefined';
    var isReadyForInitialization = !isServer &&
        !!window.PelmConnect &&
        !loading &&
        !error &&
        isConnectTokenDefined(config);
    React.useEffect(function () {
        if (isReadyForInitialization && window.PelmConnect) {
            window.PelmConnect.initialize(__assign({}, config, { onReady: function () { return setIsReadyToOpen(true); } }));
        }
    }, [isReadyForInitialization, config]);
    var open = React.useCallback(function () {
        if (window.PelmConnect) {
            window.PelmConnect.open(config);
        }
    }, [config]);
    var exit = React.useCallback(function () {
        if (window.PelmConnect) {
            window.PelmConnect.exit();
        }
    }, [config]);
    return {
        error: error,
        ready: isReadyToOpen,
        open: open,
        exit: exit
    };
};

var ConnectButton = function (props) {
    var _a = useConnect(props.config), open = _a.open, ready = _a.ready;
    return (React.createElement(React.Fragment, null,
        React.createElement("button", { type: "button", 
            // className="button"
            onClick: function () { return open(); }, 
            // disabled={!ready || error}
            disabled: !ready }, props.children === undefined
            ? "Connect your utility"
            : props.children)));
};

exports.ConnectButton = ConnectButton;
exports.useConnect = useConnect;
//# sourceMappingURL=index.js.map
